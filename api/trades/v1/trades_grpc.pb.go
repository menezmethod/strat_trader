// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: trades/v1/trades.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradesServiceClient is the client API for TradesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradesServiceClient interface {
	CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error)
	CreateCurrency(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CreateCurrencyResponse, error)
	CreateCurrencyRate(ctx context.Context, in *CreateCurrencyRateRequest, opts ...grpc.CallOption) (*CreateCurrencyRateResponse, error)
	CreateCurrencyUsed(ctx context.Context, in *CreateCurrencyUsedRequest, opts ...grpc.CallOption) (*CreateCurrencyUsedResponse, error)
	CreateCurrentInventory(ctx context.Context, in *CreateCurrentInventoryRequest, opts ...grpc.CallOption) (*CreateCurrentInventoryResponse, error)
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error)
	CreatePrice(ctx context.Context, in *CreatePriceRequest, opts ...grpc.CallOption) (*CreatePriceResponse, error)
	CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
	CreateTrade(ctx context.Context, in *CreateTradeRequest, opts ...grpc.CallOption) (*CreateTradeResponse, error)
	CreateTrader(ctx context.Context, in *CreateTraderRequest, opts ...grpc.CallOption) (*CreateTraderResponse, error)
	DeleteCountry(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*DeleteCountryResponse, error)
	DeleteCurrency(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*DeleteCurrencyResponse, error)
	DeleteCurrencyRate(ctx context.Context, in *DeleteCurrencyRateRequest, opts ...grpc.CallOption) (*DeleteCurrencyRateResponse, error)
	DeleteCurrencyUsed(ctx context.Context, in *DeleteCurrencyUsedRequest, opts ...grpc.CallOption) (*DeleteCurrencyUsedResponse, error)
	DeleteCurrentInventory(ctx context.Context, in *DeleteCurrentInventoryRequest, opts ...grpc.CallOption) (*DeleteCurrentInventoryResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	DeleteOffer(ctx context.Context, in *DeleteOfferRequest, opts ...grpc.CallOption) (*DeleteOfferResponse, error)
	DeletePrice(ctx context.Context, in *DeletePriceRequest, opts ...grpc.CallOption) (*DeletePriceResponse, error)
	DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*DeleteReportResponse, error)
	DeleteTrade(ctx context.Context, in *DeleteTradeRequest, opts ...grpc.CallOption) (*DeleteTradeResponse, error)
	DeleteTrader(ctx context.Context, in *DeleteTraderRequest, opts ...grpc.CallOption) (*DeleteTraderResponse, error)
	GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error)
	GetCurrency(ctx context.Context, in *GetCurrencyRequest, opts ...grpc.CallOption) (*GetCurrencyResponse, error)
	GetCurrencyRate(ctx context.Context, in *GetCurrencyRateRequest, opts ...grpc.CallOption) (*GetCurrencyRateResponse, error)
	GetCurrencyUsed(ctx context.Context, in *GetCurrencyUsedRequest, opts ...grpc.CallOption) (*GetCurrencyUsedResponse, error)
	GetCurrentInventory(ctx context.Context, in *GetCurrentInventoryRequest, opts ...grpc.CallOption) (*GetCurrentInventoryResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	GetOffer(ctx context.Context, in *GetOfferRequest, opts ...grpc.CallOption) (*GetOfferResponse, error)
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error)
	GetTrade(ctx context.Context, in *GetTradeRequest, opts ...grpc.CallOption) (*GetTradeResponse, error)
	GetTrader(ctx context.Context, in *GetTraderRequest, opts ...grpc.CallOption) (*GetTraderResponse, error)
	ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error)
	ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error)
	ListCurrenciesUsed(ctx context.Context, in *ListCurrenciesUsedRequest, opts ...grpc.CallOption) (*ListCurrenciesUsedResponse, error)
	ListCurrencyRates(ctx context.Context, in *ListCurrencyRatesRequest, opts ...grpc.CallOption) (*ListCurrencyRatesResponse, error)
	ListCurrentInventory(ctx context.Context, in *ListCurrentInventoryRequest, opts ...grpc.CallOption) (*ListCurrentInventoryResponse, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	ListOffers(ctx context.Context, in *ListOffersRequest, opts ...grpc.CallOption) (*ListOffersResponse, error)
	ListPrices(ctx context.Context, in *ListPricesRequest, opts ...grpc.CallOption) (*ListPricesResponse, error)
	ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error)
	ListTraders(ctx context.Context, in *ListTradersRequest, opts ...grpc.CallOption) (*ListTradersResponse, error)
	ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error)
	UpdateCountry(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error)
	UpdateCurrency(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*UpdateCurrencyResponse, error)
	UpdateCurrencyRate(ctx context.Context, in *UpdateCurrencyRateRequest, opts ...grpc.CallOption) (*UpdateCurrencyRateResponse, error)
	UpdateCurrencyUsed(ctx context.Context, in *UpdateCurrencyUsedRequest, opts ...grpc.CallOption) (*UpdateCurrencyUsedResponse, error)
	UpdateCurrentInventory(ctx context.Context, in *UpdateCurrentInventoryRequest, opts ...grpc.CallOption) (*UpdateCurrentInventoryResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	UpdateOffer(ctx context.Context, in *UpdateOfferRequest, opts ...grpc.CallOption) (*UpdateOfferResponse, error)
	UpdatePrice(ctx context.Context, in *UpdatePriceRequest, opts ...grpc.CallOption) (*UpdatePriceResponse, error)
	UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*UpdateReportResponse, error)
	UpdateTrade(ctx context.Context, in *UpdateTradeRequest, opts ...grpc.CallOption) (*UpdateTradeResponse, error)
	UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error)
}

type tradesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradesServiceClient(cc grpc.ClientConnInterface) TradesServiceClient {
	return &tradesServiceClient{cc}
}

func (c *tradesServiceClient) CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error) {
	out := new(CreateCountryResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreateCurrency(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CreateCurrencyResponse, error) {
	out := new(CreateCurrencyResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreateCurrencyRate(ctx context.Context, in *CreateCurrencyRateRequest, opts ...grpc.CallOption) (*CreateCurrencyRateResponse, error) {
	out := new(CreateCurrencyRateResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateCurrencyRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreateCurrencyUsed(ctx context.Context, in *CreateCurrencyUsedRequest, opts ...grpc.CallOption) (*CreateCurrencyUsedResponse, error) {
	out := new(CreateCurrencyUsedResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateCurrencyUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreateCurrentInventory(ctx context.Context, in *CreateCurrentInventoryRequest, opts ...grpc.CallOption) (*CreateCurrentInventoryResponse, error) {
	out := new(CreateCurrentInventoryResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateCurrentInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error) {
	out := new(CreateOfferResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreatePrice(ctx context.Context, in *CreatePriceRequest, opts ...grpc.CallOption) (*CreatePriceResponse, error) {
	out := new(CreatePriceResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreatePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreateTrade(ctx context.Context, in *CreateTradeRequest, opts ...grpc.CallOption) (*CreateTradeResponse, error) {
	out := new(CreateTradeResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) CreateTrader(ctx context.Context, in *CreateTraderRequest, opts ...grpc.CallOption) (*CreateTraderResponse, error) {
	out := new(CreateTraderResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/CreateTrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteCountry(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*DeleteCountryResponse, error) {
	out := new(DeleteCountryResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteCurrency(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*DeleteCurrencyResponse, error) {
	out := new(DeleteCurrencyResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteCurrencyRate(ctx context.Context, in *DeleteCurrencyRateRequest, opts ...grpc.CallOption) (*DeleteCurrencyRateResponse, error) {
	out := new(DeleteCurrencyRateResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteCurrencyRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteCurrencyUsed(ctx context.Context, in *DeleteCurrencyUsedRequest, opts ...grpc.CallOption) (*DeleteCurrencyUsedResponse, error) {
	out := new(DeleteCurrencyUsedResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteCurrencyUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteCurrentInventory(ctx context.Context, in *DeleteCurrentInventoryRequest, opts ...grpc.CallOption) (*DeleteCurrentInventoryResponse, error) {
	out := new(DeleteCurrentInventoryResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteCurrentInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteOffer(ctx context.Context, in *DeleteOfferRequest, opts ...grpc.CallOption) (*DeleteOfferResponse, error) {
	out := new(DeleteOfferResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeletePrice(ctx context.Context, in *DeletePriceRequest, opts ...grpc.CallOption) (*DeletePriceResponse, error) {
	out := new(DeletePriceResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeletePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*DeleteReportResponse, error) {
	out := new(DeleteReportResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteTrade(ctx context.Context, in *DeleteTradeRequest, opts ...grpc.CallOption) (*DeleteTradeResponse, error) {
	out := new(DeleteTradeResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) DeleteTrader(ctx context.Context, in *DeleteTraderRequest, opts ...grpc.CallOption) (*DeleteTraderResponse, error) {
	out := new(DeleteTraderResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/DeleteTrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error) {
	out := new(GetCountryResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetCurrency(ctx context.Context, in *GetCurrencyRequest, opts ...grpc.CallOption) (*GetCurrencyResponse, error) {
	out := new(GetCurrencyResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetCurrencyRate(ctx context.Context, in *GetCurrencyRateRequest, opts ...grpc.CallOption) (*GetCurrencyRateResponse, error) {
	out := new(GetCurrencyRateResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetCurrencyRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetCurrencyUsed(ctx context.Context, in *GetCurrencyUsedRequest, opts ...grpc.CallOption) (*GetCurrencyUsedResponse, error) {
	out := new(GetCurrencyUsedResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetCurrencyUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetCurrentInventory(ctx context.Context, in *GetCurrentInventoryRequest, opts ...grpc.CallOption) (*GetCurrentInventoryResponse, error) {
	out := new(GetCurrentInventoryResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetCurrentInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetOffer(ctx context.Context, in *GetOfferRequest, opts ...grpc.CallOption) (*GetOfferResponse, error) {
	out := new(GetOfferResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error) {
	out := new(GetReportResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetTrade(ctx context.Context, in *GetTradeRequest, opts ...grpc.CallOption) (*GetTradeResponse, error) {
	out := new(GetTradeResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) GetTrader(ctx context.Context, in *GetTraderRequest, opts ...grpc.CallOption) (*GetTraderResponse, error) {
	out := new(GetTraderResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/GetTrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error) {
	out := new(ListCountriesResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error) {
	out := new(ListCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListCurrenciesUsed(ctx context.Context, in *ListCurrenciesUsedRequest, opts ...grpc.CallOption) (*ListCurrenciesUsedResponse, error) {
	out := new(ListCurrenciesUsedResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListCurrenciesUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListCurrencyRates(ctx context.Context, in *ListCurrencyRatesRequest, opts ...grpc.CallOption) (*ListCurrencyRatesResponse, error) {
	out := new(ListCurrencyRatesResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListCurrencyRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListCurrentInventory(ctx context.Context, in *ListCurrentInventoryRequest, opts ...grpc.CallOption) (*ListCurrentInventoryResponse, error) {
	out := new(ListCurrentInventoryResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListCurrentInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListOffers(ctx context.Context, in *ListOffersRequest, opts ...grpc.CallOption) (*ListOffersResponse, error) {
	out := new(ListOffersResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListPrices(ctx context.Context, in *ListPricesRequest, opts ...grpc.CallOption) (*ListPricesResponse, error) {
	out := new(ListPricesResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error) {
	out := new(ListReportsResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListTraders(ctx context.Context, in *ListTradersRequest, opts ...grpc.CallOption) (*ListTradersResponse, error) {
	out := new(ListTradersResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListTraders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error) {
	out := new(ListTradesResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/ListTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateCountry(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error) {
	out := new(UpdateCountryResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateCurrency(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*UpdateCurrencyResponse, error) {
	out := new(UpdateCurrencyResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateCurrencyRate(ctx context.Context, in *UpdateCurrencyRateRequest, opts ...grpc.CallOption) (*UpdateCurrencyRateResponse, error) {
	out := new(UpdateCurrencyRateResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateCurrencyRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateCurrencyUsed(ctx context.Context, in *UpdateCurrencyUsedRequest, opts ...grpc.CallOption) (*UpdateCurrencyUsedResponse, error) {
	out := new(UpdateCurrencyUsedResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateCurrencyUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateCurrentInventory(ctx context.Context, in *UpdateCurrentInventoryRequest, opts ...grpc.CallOption) (*UpdateCurrentInventoryResponse, error) {
	out := new(UpdateCurrentInventoryResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateCurrentInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateOffer(ctx context.Context, in *UpdateOfferRequest, opts ...grpc.CallOption) (*UpdateOfferResponse, error) {
	out := new(UpdateOfferResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdatePrice(ctx context.Context, in *UpdatePriceRequest, opts ...grpc.CallOption) (*UpdatePriceResponse, error) {
	out := new(UpdatePriceResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdatePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*UpdateReportResponse, error) {
	out := new(UpdateReportResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateTrade(ctx context.Context, in *UpdateTradeRequest, opts ...grpc.CallOption) (*UpdateTradeResponse, error) {
	out := new(UpdateTradeResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesServiceClient) UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error) {
	out := new(UpdateTraderResponse)
	err := c.cc.Invoke(ctx, "/trades.v1.TradesService/UpdateTrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradesServiceServer is the server API for TradesService service.
// All implementations must embed UnimplementedTradesServiceServer
// for forward compatibility
type TradesServiceServer interface {
	CreateCountry(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error)
	CreateCurrency(context.Context, *CreateCurrencyRequest) (*CreateCurrencyResponse, error)
	CreateCurrencyRate(context.Context, *CreateCurrencyRateRequest) (*CreateCurrencyRateResponse, error)
	CreateCurrencyUsed(context.Context, *CreateCurrencyUsedRequest) (*CreateCurrencyUsedResponse, error)
	CreateCurrentInventory(context.Context, *CreateCurrentInventoryRequest) (*CreateCurrentInventoryResponse, error)
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	CreateOffer(context.Context, *CreateOfferRequest) (*CreateOfferResponse, error)
	CreatePrice(context.Context, *CreatePriceRequest) (*CreatePriceResponse, error)
	CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error)
	CreateTrade(context.Context, *CreateTradeRequest) (*CreateTradeResponse, error)
	CreateTrader(context.Context, *CreateTraderRequest) (*CreateTraderResponse, error)
	DeleteCountry(context.Context, *DeleteCountryRequest) (*DeleteCountryResponse, error)
	DeleteCurrency(context.Context, *DeleteCurrencyRequest) (*DeleteCurrencyResponse, error)
	DeleteCurrencyRate(context.Context, *DeleteCurrencyRateRequest) (*DeleteCurrencyRateResponse, error)
	DeleteCurrencyUsed(context.Context, *DeleteCurrencyUsedRequest) (*DeleteCurrencyUsedResponse, error)
	DeleteCurrentInventory(context.Context, *DeleteCurrentInventoryRequest) (*DeleteCurrentInventoryResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	DeleteOffer(context.Context, *DeleteOfferRequest) (*DeleteOfferResponse, error)
	DeletePrice(context.Context, *DeletePriceRequest) (*DeletePriceResponse, error)
	DeleteReport(context.Context, *DeleteReportRequest) (*DeleteReportResponse, error)
	DeleteTrade(context.Context, *DeleteTradeRequest) (*DeleteTradeResponse, error)
	DeleteTrader(context.Context, *DeleteTraderRequest) (*DeleteTraderResponse, error)
	GetCountry(context.Context, *GetCountryRequest) (*GetCountryResponse, error)
	GetCurrency(context.Context, *GetCurrencyRequest) (*GetCurrencyResponse, error)
	GetCurrencyRate(context.Context, *GetCurrencyRateRequest) (*GetCurrencyRateResponse, error)
	GetCurrencyUsed(context.Context, *GetCurrencyUsedRequest) (*GetCurrencyUsedResponse, error)
	GetCurrentInventory(context.Context, *GetCurrentInventoryRequest) (*GetCurrentInventoryResponse, error)
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	GetOffer(context.Context, *GetOfferRequest) (*GetOfferResponse, error)
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error)
	GetTrade(context.Context, *GetTradeRequest) (*GetTradeResponse, error)
	GetTrader(context.Context, *GetTraderRequest) (*GetTraderResponse, error)
	ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error)
	ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error)
	ListCurrenciesUsed(context.Context, *ListCurrenciesUsedRequest) (*ListCurrenciesUsedResponse, error)
	ListCurrencyRates(context.Context, *ListCurrencyRatesRequest) (*ListCurrencyRatesResponse, error)
	ListCurrentInventory(context.Context, *ListCurrentInventoryRequest) (*ListCurrentInventoryResponse, error)
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	ListOffers(context.Context, *ListOffersRequest) (*ListOffersResponse, error)
	ListPrices(context.Context, *ListPricesRequest) (*ListPricesResponse, error)
	ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error)
	ListTraders(context.Context, *ListTradersRequest) (*ListTradersResponse, error)
	ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error)
	UpdateCountry(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error)
	UpdateCurrency(context.Context, *UpdateCurrencyRequest) (*UpdateCurrencyResponse, error)
	UpdateCurrencyRate(context.Context, *UpdateCurrencyRateRequest) (*UpdateCurrencyRateResponse, error)
	UpdateCurrencyUsed(context.Context, *UpdateCurrencyUsedRequest) (*UpdateCurrencyUsedResponse, error)
	UpdateCurrentInventory(context.Context, *UpdateCurrentInventoryRequest) (*UpdateCurrentInventoryResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	UpdateOffer(context.Context, *UpdateOfferRequest) (*UpdateOfferResponse, error)
	UpdatePrice(context.Context, *UpdatePriceRequest) (*UpdatePriceResponse, error)
	UpdateReport(context.Context, *UpdateReportRequest) (*UpdateReportResponse, error)
	UpdateTrade(context.Context, *UpdateTradeRequest) (*UpdateTradeResponse, error)
	UpdateTrader(context.Context, *UpdateTraderRequest) (*UpdateTraderResponse, error)
	mustEmbedUnimplementedTradesServiceServer()
}

// UnimplementedTradesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradesServiceServer struct {
}

func (UnimplementedTradesServiceServer) CreateCountry(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountry not implemented")
}
func (UnimplementedTradesServiceServer) CreateCurrency(context.Context, *CreateCurrencyRequest) (*CreateCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrency not implemented")
}
func (UnimplementedTradesServiceServer) CreateCurrencyRate(context.Context, *CreateCurrencyRateRequest) (*CreateCurrencyRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrencyRate not implemented")
}
func (UnimplementedTradesServiceServer) CreateCurrencyUsed(context.Context, *CreateCurrencyUsedRequest) (*CreateCurrencyUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrencyUsed not implemented")
}
func (UnimplementedTradesServiceServer) CreateCurrentInventory(context.Context, *CreateCurrentInventoryRequest) (*CreateCurrentInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrentInventory not implemented")
}
func (UnimplementedTradesServiceServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedTradesServiceServer) CreateOffer(context.Context, *CreateOfferRequest) (*CreateOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffer not implemented")
}
func (UnimplementedTradesServiceServer) CreatePrice(context.Context, *CreatePriceRequest) (*CreatePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrice not implemented")
}
func (UnimplementedTradesServiceServer) CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (UnimplementedTradesServiceServer) CreateTrade(context.Context, *CreateTradeRequest) (*CreateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrade not implemented")
}
func (UnimplementedTradesServiceServer) CreateTrader(context.Context, *CreateTraderRequest) (*CreateTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrader not implemented")
}
func (UnimplementedTradesServiceServer) DeleteCountry(context.Context, *DeleteCountryRequest) (*DeleteCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCountry not implemented")
}
func (UnimplementedTradesServiceServer) DeleteCurrency(context.Context, *DeleteCurrencyRequest) (*DeleteCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrency not implemented")
}
func (UnimplementedTradesServiceServer) DeleteCurrencyRate(context.Context, *DeleteCurrencyRateRequest) (*DeleteCurrencyRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrencyRate not implemented")
}
func (UnimplementedTradesServiceServer) DeleteCurrencyUsed(context.Context, *DeleteCurrencyUsedRequest) (*DeleteCurrencyUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrencyUsed not implemented")
}
func (UnimplementedTradesServiceServer) DeleteCurrentInventory(context.Context, *DeleteCurrentInventoryRequest) (*DeleteCurrentInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrentInventory not implemented")
}
func (UnimplementedTradesServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedTradesServiceServer) DeleteOffer(context.Context, *DeleteOfferRequest) (*DeleteOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOffer not implemented")
}
func (UnimplementedTradesServiceServer) DeletePrice(context.Context, *DeletePriceRequest) (*DeletePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrice not implemented")
}
func (UnimplementedTradesServiceServer) DeleteReport(context.Context, *DeleteReportRequest) (*DeleteReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReport not implemented")
}
func (UnimplementedTradesServiceServer) DeleteTrade(context.Context, *DeleteTradeRequest) (*DeleteTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrade not implemented")
}
func (UnimplementedTradesServiceServer) DeleteTrader(context.Context, *DeleteTraderRequest) (*DeleteTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrader not implemented")
}
func (UnimplementedTradesServiceServer) GetCountry(context.Context, *GetCountryRequest) (*GetCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}
func (UnimplementedTradesServiceServer) GetCurrency(context.Context, *GetCurrencyRequest) (*GetCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrency not implemented")
}
func (UnimplementedTradesServiceServer) GetCurrencyRate(context.Context, *GetCurrencyRateRequest) (*GetCurrencyRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyRate not implemented")
}
func (UnimplementedTradesServiceServer) GetCurrencyUsed(context.Context, *GetCurrencyUsedRequest) (*GetCurrencyUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyUsed not implemented")
}
func (UnimplementedTradesServiceServer) GetCurrentInventory(context.Context, *GetCurrentInventoryRequest) (*GetCurrentInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentInventory not implemented")
}
func (UnimplementedTradesServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedTradesServiceServer) GetOffer(context.Context, *GetOfferRequest) (*GetOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffer not implemented")
}
func (UnimplementedTradesServiceServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedTradesServiceServer) GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedTradesServiceServer) GetTrade(context.Context, *GetTradeRequest) (*GetTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrade not implemented")
}
func (UnimplementedTradesServiceServer) GetTrader(context.Context, *GetTraderRequest) (*GetTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrader not implemented")
}
func (UnimplementedTradesServiceServer) ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (UnimplementedTradesServiceServer) ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrencies not implemented")
}
func (UnimplementedTradesServiceServer) ListCurrenciesUsed(context.Context, *ListCurrenciesUsedRequest) (*ListCurrenciesUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrenciesUsed not implemented")
}
func (UnimplementedTradesServiceServer) ListCurrencyRates(context.Context, *ListCurrencyRatesRequest) (*ListCurrencyRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrencyRates not implemented")
}
func (UnimplementedTradesServiceServer) ListCurrentInventory(context.Context, *ListCurrentInventoryRequest) (*ListCurrentInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentInventory not implemented")
}
func (UnimplementedTradesServiceServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedTradesServiceServer) ListOffers(context.Context, *ListOffersRequest) (*ListOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOffers not implemented")
}
func (UnimplementedTradesServiceServer) ListPrices(context.Context, *ListPricesRequest) (*ListPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrices not implemented")
}
func (UnimplementedTradesServiceServer) ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (UnimplementedTradesServiceServer) ListTraders(context.Context, *ListTradersRequest) (*ListTradersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTraders not implemented")
}
func (UnimplementedTradesServiceServer) ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrades not implemented")
}
func (UnimplementedTradesServiceServer) UpdateCountry(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountry not implemented")
}
func (UnimplementedTradesServiceServer) UpdateCurrency(context.Context, *UpdateCurrencyRequest) (*UpdateCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrency not implemented")
}
func (UnimplementedTradesServiceServer) UpdateCurrencyRate(context.Context, *UpdateCurrencyRateRequest) (*UpdateCurrencyRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrencyRate not implemented")
}
func (UnimplementedTradesServiceServer) UpdateCurrencyUsed(context.Context, *UpdateCurrencyUsedRequest) (*UpdateCurrencyUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrencyUsed not implemented")
}
func (UnimplementedTradesServiceServer) UpdateCurrentInventory(context.Context, *UpdateCurrentInventoryRequest) (*UpdateCurrentInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrentInventory not implemented")
}
func (UnimplementedTradesServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedTradesServiceServer) UpdateOffer(context.Context, *UpdateOfferRequest) (*UpdateOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOffer not implemented")
}
func (UnimplementedTradesServiceServer) UpdatePrice(context.Context, *UpdatePriceRequest) (*UpdatePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrice not implemented")
}
func (UnimplementedTradesServiceServer) UpdateReport(context.Context, *UpdateReportRequest) (*UpdateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReport not implemented")
}
func (UnimplementedTradesServiceServer) UpdateTrade(context.Context, *UpdateTradeRequest) (*UpdateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrade not implemented")
}
func (UnimplementedTradesServiceServer) UpdateTrader(context.Context, *UpdateTraderRequest) (*UpdateTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrader not implemented")
}
func (UnimplementedTradesServiceServer) mustEmbedUnimplementedTradesServiceServer() {}

// UnsafeTradesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradesServiceServer will
// result in compilation errors.
type UnsafeTradesServiceServer interface {
	mustEmbedUnimplementedTradesServiceServer()
}

func RegisterTradesServiceServer(s grpc.ServiceRegistrar, srv TradesServiceServer) {
	s.RegisterService(&TradesService_ServiceDesc, srv)
}

func _TradesService_CreateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateCountry(ctx, req.(*CreateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateCurrency(ctx, req.(*CreateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreateCurrencyRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateCurrencyRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateCurrencyRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateCurrencyRate(ctx, req.(*CreateCurrencyRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreateCurrencyUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateCurrencyUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateCurrencyUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateCurrencyUsed(ctx, req.(*CreateCurrencyUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreateCurrentInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrentInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateCurrentInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateCurrentInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateCurrentInventory(ctx, req.(*CreateCurrentInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateOffer(ctx, req.(*CreateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreatePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreatePrice(ctx, req.(*CreatePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateReport(ctx, req.(*CreateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreateTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateTrade(ctx, req.(*CreateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_CreateTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).CreateTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/CreateTrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).CreateTrader(ctx, req.(*CreateTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteCountry(ctx, req.(*DeleteCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteCurrency(ctx, req.(*DeleteCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteCurrencyRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteCurrencyRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteCurrencyRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteCurrencyRate(ctx, req.(*DeleteCurrencyRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteCurrencyUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteCurrencyUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteCurrencyUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteCurrencyUsed(ctx, req.(*DeleteCurrencyUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteCurrentInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrentInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteCurrentInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteCurrentInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteCurrentInventory(ctx, req.(*DeleteCurrentInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteOffer(ctx, req.(*DeleteOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeletePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeletePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeletePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeletePrice(ctx, req.(*DeletePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteReport(ctx, req.(*DeleteReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteTrade(ctx, req.(*DeleteTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_DeleteTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).DeleteTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/DeleteTrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).DeleteTrader(ctx, req.(*DeleteTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetCountry(ctx, req.(*GetCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetCurrency(ctx, req.(*GetCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetCurrencyRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetCurrencyRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetCurrencyRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetCurrencyRate(ctx, req.(*GetCurrencyRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetCurrencyUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetCurrencyUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetCurrencyUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetCurrencyUsed(ctx, req.(*GetCurrencyUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetCurrentInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetCurrentInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetCurrentInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetCurrentInventory(ctx, req.(*GetCurrentInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetOffer(ctx, req.(*GetOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetReport(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetTrade(ctx, req.(*GetTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_GetTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).GetTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/GetTrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).GetTrader(ctx, req.(*GetTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListCountries(ctx, req.(*ListCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListCurrencies(ctx, req.(*ListCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListCurrenciesUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrenciesUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListCurrenciesUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListCurrenciesUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListCurrenciesUsed(ctx, req.(*ListCurrenciesUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListCurrencyRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrencyRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListCurrencyRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListCurrencyRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListCurrencyRates(ctx, req.(*ListCurrencyRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListCurrentInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrentInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListCurrentInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListCurrentInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListCurrentInventory(ctx, req.(*ListCurrentInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListOffers(ctx, req.(*ListOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListPrices(ctx, req.(*ListPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListReports(ctx, req.(*ListReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListTraders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTradersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListTraders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListTraders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListTraders(ctx, req.(*ListTradersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_ListTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).ListTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/ListTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).ListTrades(ctx, req.(*ListTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateCountry(ctx, req.(*UpdateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateCurrency(ctx, req.(*UpdateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateCurrencyRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateCurrencyRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateCurrencyRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateCurrencyRate(ctx, req.(*UpdateCurrencyRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateCurrencyUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateCurrencyUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateCurrencyUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateCurrencyUsed(ctx, req.(*UpdateCurrencyUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateCurrentInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrentInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateCurrentInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateCurrentInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateCurrentInventory(ctx, req.(*UpdateCurrentInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateOffer(ctx, req.(*UpdateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdatePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdatePrice(ctx, req.(*UpdatePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateReport(ctx, req.(*UpdateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateTrade(ctx, req.(*UpdateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradesService_UpdateTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServiceServer).UpdateTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trades.v1.TradesService/UpdateTrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServiceServer).UpdateTrader(ctx, req.(*UpdateTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradesService_ServiceDesc is the grpc.ServiceDesc for TradesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trades.v1.TradesService",
	HandlerType: (*TradesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCountry",
			Handler:    _TradesService_CreateCountry_Handler,
		},
		{
			MethodName: "CreateCurrency",
			Handler:    _TradesService_CreateCurrency_Handler,
		},
		{
			MethodName: "CreateCurrencyRate",
			Handler:    _TradesService_CreateCurrencyRate_Handler,
		},
		{
			MethodName: "CreateCurrencyUsed",
			Handler:    _TradesService_CreateCurrencyUsed_Handler,
		},
		{
			MethodName: "CreateCurrentInventory",
			Handler:    _TradesService_CreateCurrentInventory_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _TradesService_CreateItem_Handler,
		},
		{
			MethodName: "CreateOffer",
			Handler:    _TradesService_CreateOffer_Handler,
		},
		{
			MethodName: "CreatePrice",
			Handler:    _TradesService_CreatePrice_Handler,
		},
		{
			MethodName: "CreateReport",
			Handler:    _TradesService_CreateReport_Handler,
		},
		{
			MethodName: "CreateTrade",
			Handler:    _TradesService_CreateTrade_Handler,
		},
		{
			MethodName: "CreateTrader",
			Handler:    _TradesService_CreateTrader_Handler,
		},
		{
			MethodName: "DeleteCountry",
			Handler:    _TradesService_DeleteCountry_Handler,
		},
		{
			MethodName: "DeleteCurrency",
			Handler:    _TradesService_DeleteCurrency_Handler,
		},
		{
			MethodName: "DeleteCurrencyRate",
			Handler:    _TradesService_DeleteCurrencyRate_Handler,
		},
		{
			MethodName: "DeleteCurrencyUsed",
			Handler:    _TradesService_DeleteCurrencyUsed_Handler,
		},
		{
			MethodName: "DeleteCurrentInventory",
			Handler:    _TradesService_DeleteCurrentInventory_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _TradesService_DeleteItem_Handler,
		},
		{
			MethodName: "DeleteOffer",
			Handler:    _TradesService_DeleteOffer_Handler,
		},
		{
			MethodName: "DeletePrice",
			Handler:    _TradesService_DeletePrice_Handler,
		},
		{
			MethodName: "DeleteReport",
			Handler:    _TradesService_DeleteReport_Handler,
		},
		{
			MethodName: "DeleteTrade",
			Handler:    _TradesService_DeleteTrade_Handler,
		},
		{
			MethodName: "DeleteTrader",
			Handler:    _TradesService_DeleteTrader_Handler,
		},
		{
			MethodName: "GetCountry",
			Handler:    _TradesService_GetCountry_Handler,
		},
		{
			MethodName: "GetCurrency",
			Handler:    _TradesService_GetCurrency_Handler,
		},
		{
			MethodName: "GetCurrencyRate",
			Handler:    _TradesService_GetCurrencyRate_Handler,
		},
		{
			MethodName: "GetCurrencyUsed",
			Handler:    _TradesService_GetCurrencyUsed_Handler,
		},
		{
			MethodName: "GetCurrentInventory",
			Handler:    _TradesService_GetCurrentInventory_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _TradesService_GetItem_Handler,
		},
		{
			MethodName: "GetOffer",
			Handler:    _TradesService_GetOffer_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _TradesService_GetPrice_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _TradesService_GetReport_Handler,
		},
		{
			MethodName: "GetTrade",
			Handler:    _TradesService_GetTrade_Handler,
		},
		{
			MethodName: "GetTrader",
			Handler:    _TradesService_GetTrader_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _TradesService_ListCountries_Handler,
		},
		{
			MethodName: "ListCurrencies",
			Handler:    _TradesService_ListCurrencies_Handler,
		},
		{
			MethodName: "ListCurrenciesUsed",
			Handler:    _TradesService_ListCurrenciesUsed_Handler,
		},
		{
			MethodName: "ListCurrencyRates",
			Handler:    _TradesService_ListCurrencyRates_Handler,
		},
		{
			MethodName: "ListCurrentInventory",
			Handler:    _TradesService_ListCurrentInventory_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _TradesService_ListItems_Handler,
		},
		{
			MethodName: "ListOffers",
			Handler:    _TradesService_ListOffers_Handler,
		},
		{
			MethodName: "ListPrices",
			Handler:    _TradesService_ListPrices_Handler,
		},
		{
			MethodName: "ListReports",
			Handler:    _TradesService_ListReports_Handler,
		},
		{
			MethodName: "ListTraders",
			Handler:    _TradesService_ListTraders_Handler,
		},
		{
			MethodName: "ListTrades",
			Handler:    _TradesService_ListTrades_Handler,
		},
		{
			MethodName: "UpdateCountry",
			Handler:    _TradesService_UpdateCountry_Handler,
		},
		{
			MethodName: "UpdateCurrency",
			Handler:    _TradesService_UpdateCurrency_Handler,
		},
		{
			MethodName: "UpdateCurrencyRate",
			Handler:    _TradesService_UpdateCurrencyRate_Handler,
		},
		{
			MethodName: "UpdateCurrencyUsed",
			Handler:    _TradesService_UpdateCurrencyUsed_Handler,
		},
		{
			MethodName: "UpdateCurrentInventory",
			Handler:    _TradesService_UpdateCurrentInventory_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _TradesService_UpdateItem_Handler,
		},
		{
			MethodName: "UpdateOffer",
			Handler:    _TradesService_UpdateOffer_Handler,
		},
		{
			MethodName: "UpdatePrice",
			Handler:    _TradesService_UpdatePrice_Handler,
		},
		{
			MethodName: "UpdateReport",
			Handler:    _TradesService_UpdateReport_Handler,
		},
		{
			MethodName: "UpdateTrade",
			Handler:    _TradesService_UpdateTrade_Handler,
		},
		{
			MethodName: "UpdateTrader",
			Handler:    _TradesService_UpdateTrader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trades/v1/trades.proto",
}
