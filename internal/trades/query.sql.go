// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package trades

import (
	"context"
	"database/sql"
	"time"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO country (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateCountry(ctx context.Context, name string) (Country, error) {
	row := q.db.QueryRowContext(ctx, createCountry, name)
	var i Country
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO currency (code, name, is_active, is_base_currency) VALUES ($1, $2, $3, $4)
RETURNING id, code, name, is_active, is_base_currency
`

type CreateCurrencyParams struct {
	Code           string
	Name           string
	IsActive       bool
	IsBaseCurrency bool
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error) {
	row := q.db.QueryRowContext(ctx, createCurrency,
		arg.Code,
		arg.Name,
		arg.IsActive,
		arg.IsBaseCurrency,
	)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsActive,
		&i.IsBaseCurrency,
	)
	return i, err
}

const createCurrencyRate = `-- name: CreateCurrencyRate :one
INSERT INTO currency_rate (currency_id, base_currency_id, rate, ts) VALUES ($1, $2, $3, $4)
RETURNING id, currency_id, base_currency_id, rate, ts
`

type CreateCurrencyRateParams struct {
	CurrencyID     int32
	BaseCurrencyID int32
	Rate           string
	Ts             time.Time
}

func (q *Queries) CreateCurrencyRate(ctx context.Context, arg CreateCurrencyRateParams) (CurrencyRate, error) {
	row := q.db.QueryRowContext(ctx, createCurrencyRate,
		arg.CurrencyID,
		arg.BaseCurrencyID,
		arg.Rate,
		arg.Ts,
	)
	var i CurrencyRate
	err := row.Scan(
		&i.ID,
		&i.CurrencyID,
		&i.BaseCurrencyID,
		&i.Rate,
		&i.Ts,
	)
	return i, err
}

const createCurrencyUsed = `-- name: CreateCurrencyUsed :one
INSERT INTO currency_used (country_id, currency_id, date_from, date_to) VALUES ($1, $2, $3, $4)
RETURNING id, country_id, currency_id, date_from, date_to
`

type CreateCurrencyUsedParams struct {
	CountryID  int32
	CurrencyID int32
	DateFrom   time.Time
	DateTo     sql.NullTime
}

func (q *Queries) CreateCurrencyUsed(ctx context.Context, arg CreateCurrencyUsedParams) (CurrencyUsed, error) {
	row := q.db.QueryRowContext(ctx, createCurrencyUsed,
		arg.CountryID,
		arg.CurrencyID,
		arg.DateFrom,
		arg.DateTo,
	)
	var i CurrencyUsed
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.CurrencyID,
		&i.DateFrom,
		&i.DateTo,
	)
	return i, err
}

const createCurrentInventory = `-- name: CreateCurrentInventory :one
INSERT INTO current_inventory (trader_id, item_id, quantity) VALUES ($1, $2, $3)
RETURNING id, trader_id, item_id, quantity
`

type CreateCurrentInventoryParams struct {
	TraderID int32
	ItemID   int32
	Quantity string
}

func (q *Queries) CreateCurrentInventory(ctx context.Context, arg CreateCurrentInventoryParams) (CurrentInventory, error) {
	row := q.db.QueryRowContext(ctx, createCurrentInventory, arg.TraderID, arg.ItemID, arg.Quantity)
	var i CurrentInventory
	err := row.Scan(
		&i.ID,
		&i.TraderID,
		&i.ItemID,
		&i.Quantity,
	)
	return i, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO item (code, name, is_active, currency_id, details) VALUES ($1, $2, $3, $4, $5)
RETURNING id, code, name, is_active, currency_id, details
`

type CreateItemParams struct {
	Code       string
	Name       string
	IsActive   bool
	CurrencyID int32
	Details    sql.NullString
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.Code,
		arg.Name,
		arg.IsActive,
		arg.CurrencyID,
		arg.Details,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsActive,
		&i.CurrencyID,
		&i.Details,
	)
	return i, err
}

const createOffer = `-- name: CreateOffer :one
INSERT INTO offer (trader_id, item_id, quantity, buy, sell, price, ts, is_active) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, trader_id, item_id, quantity, buy, sell, price, ts, is_active
`

type CreateOfferParams struct {
	TraderID int32
	ItemID   int32
	Quantity string
	Buy      bool
	Sell     bool
	Price    sql.NullString
	Ts       time.Time
	IsActive bool
}

func (q *Queries) CreateOffer(ctx context.Context, arg CreateOfferParams) (Offer, error) {
	row := q.db.QueryRowContext(ctx, createOffer,
		arg.TraderID,
		arg.ItemID,
		arg.Quantity,
		arg.Buy,
		arg.Sell,
		arg.Price,
		arg.Ts,
		arg.IsActive,
	)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.TraderID,
		&i.ItemID,
		&i.Quantity,
		&i.Buy,
		&i.Sell,
		&i.Price,
		&i.Ts,
		&i.IsActive,
	)
	return i, err
}

const createPrice = `-- name: CreatePrice :one
INSERT INTO price (item_id, currency_id, buy, sell, ts) VALUES ($1, $2, $3, $4, $5)
RETURNING id, item_id, currency_id, buy, sell, ts
`

type CreatePriceParams struct {
	ItemID     int32
	CurrencyID int32
	Buy        string
	Sell       string
	Ts         time.Time
}

func (q *Queries) CreatePrice(ctx context.Context, arg CreatePriceParams) (Price, error) {
	row := q.db.QueryRowContext(ctx, createPrice,
		arg.ItemID,
		arg.CurrencyID,
		arg.Buy,
		arg.Sell,
		arg.Ts,
	)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.CurrencyID,
		&i.Buy,
		&i.Sell,
		&i.Ts,
	)
	return i, err
}

const createReport = `-- name: CreateReport :one
INSERT INTO report (trading_date, item_id, currency_id, first_price, last_price, min_price, max_price, avg_price, total_amount, quantity) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, trading_date, item_id, currency_id, first_price, last_price, min_price, max_price, avg_price, total_amount, quantity
`

type CreateReportParams struct {
	TradingDate time.Time
	ItemID      int32
	CurrencyID  int32
	FirstPrice  sql.NullString
	LastPrice   sql.NullString
	MinPrice    sql.NullString
	MaxPrice    sql.NullString
	AvgPrice    sql.NullString
	TotalAmount sql.NullString
	Quantity    sql.NullString
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, createReport,
		arg.TradingDate,
		arg.ItemID,
		arg.CurrencyID,
		arg.FirstPrice,
		arg.LastPrice,
		arg.MinPrice,
		arg.MaxPrice,
		arg.AvgPrice,
		arg.TotalAmount,
		arg.Quantity,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.TradingDate,
		&i.ItemID,
		&i.CurrencyID,
		&i.FirstPrice,
		&i.LastPrice,
		&i.MinPrice,
		&i.MaxPrice,
		&i.AvgPrice,
		&i.TotalAmount,
		&i.Quantity,
	)
	return i, err
}

const createTrade = `-- name: CreateTrade :one
INSERT INTO trade (item_id, seller_id, buyer_id, quantity, unit_price, description, offer_id) VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, item_id, seller_id, buyer_id, quantity, unit_price, description, offer_id
`

type CreateTradeParams struct {
	ItemID      int32
	SellerID    sql.NullInt32
	BuyerID     int32
	Quantity    string
	UnitPrice   string
	Description string
	OfferID     int32
}

func (q *Queries) CreateTrade(ctx context.Context, arg CreateTradeParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, createTrade,
		arg.ItemID,
		arg.SellerID,
		arg.BuyerID,
		arg.Quantity,
		arg.UnitPrice,
		arg.Description,
		arg.OfferID,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.SellerID,
		&i.BuyerID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Description,
		&i.OfferID,
	)
	return i, err
}

const createTrader = `-- name: CreateTrader :one
INSERT INTO trader (first_name, last_name, user_name, password, email, confirmation_code, time_registered,
                    time_confirmed, country_id, preferred_currency_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, first_name, last_name, user_name, password, email, confirmation_code, time_registered, time_confirmed, country_id, preferred_currency_id
`

type CreateTraderParams struct {
	FirstName           string
	LastName            string
	UserName            string
	Password            string
	Email               string
	ConfirmationCode    string
	TimeRegistered      time.Time
	TimeConfirmed       time.Time
	CountryID           sql.NullInt32
	PreferredCurrencyID sql.NullInt32
}

func (q *Queries) CreateTrader(ctx context.Context, arg CreateTraderParams) (Trader, error) {
	row := q.db.QueryRowContext(ctx, createTrader,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
		arg.Password,
		arg.Email,
		arg.ConfirmationCode,
		arg.TimeRegistered,
		arg.TimeConfirmed,
		arg.CountryID,
		arg.PreferredCurrencyID,
	)
	var i Trader
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Password,
		&i.Email,
		&i.ConfirmationCode,
		&i.TimeRegistered,
		&i.TimeConfirmed,
		&i.CountryID,
		&i.PreferredCurrencyID,
	)
	return i, err
}

const deleteCountry = `-- name: DeleteCountry :exec
DELETE FROM country
WHERE id = $1
`

func (q *Queries) DeleteCountry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCountry, id)
	return err
}

const deleteCurrency = `-- name: DeleteCurrency :exec
DELETE FROM currency
WHERE id = $1
`

func (q *Queries) DeleteCurrency(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCurrency, id)
	return err
}

const deleteCurrencyRate = `-- name: DeleteCurrencyRate :exec
DELETE FROM currency_rate
WHERE id = $1
`

func (q *Queries) DeleteCurrencyRate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCurrencyRate, id)
	return err
}

const deleteCurrencyUsed = `-- name: DeleteCurrencyUsed :exec
DELETE FROM currency_used
WHERE id = $1
`

func (q *Queries) DeleteCurrencyUsed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCurrencyUsed, id)
	return err
}

const deleteCurrentInventory = `-- name: DeleteCurrentInventory :exec
DELETE FROM current_inventory
WHERE id = $1
`

func (q *Queries) DeleteCurrentInventory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCurrentInventory, id)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM item
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const deleteOffer = `-- name: DeleteOffer :exec
DELETE FROM offer
WHERE id = $1
`

func (q *Queries) DeleteOffer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOffer, id)
	return err
}

const deletePrice = `-- name: DeletePrice :exec
DELETE FROM price
WHERE id = $1
`

func (q *Queries) DeletePrice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePrice, id)
	return err
}

const deleteReport = `-- name: DeleteReport :exec
DELETE FROM report
WHERE id = $1
`

func (q *Queries) DeleteReport(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReport, id)
	return err
}

const deleteTrade = `-- name: DeleteTrade :exec
DELETE FROM trade
WHERE id = $1
`

func (q *Queries) DeleteTrade(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrade, id)
	return err
}

const deleteTrader = `-- name: DeleteTrader :exec
DELETE FROM trader
WHERE id = $1
`

func (q *Queries) DeleteTrader(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrader, id)
	return err
}

const getCountry = `-- name: GetCountry :one
SELECT id, name FROM country
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCountry(ctx context.Context, id int64) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountry, id)
	var i Country
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCurrency = `-- name: GetCurrency :one
SELECT id, code, name, is_active, is_base_currency FROM currency
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCurrency(ctx context.Context, id int64) (Currency, error) {
	row := q.db.QueryRowContext(ctx, getCurrency, id)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsActive,
		&i.IsBaseCurrency,
	)
	return i, err
}

const getCurrencyRate = `-- name: GetCurrencyRate :one
SELECT id, currency_id, base_currency_id, rate, ts FROM currency_rate
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCurrencyRate(ctx context.Context, id int64) (CurrencyRate, error) {
	row := q.db.QueryRowContext(ctx, getCurrencyRate, id)
	var i CurrencyRate
	err := row.Scan(
		&i.ID,
		&i.CurrencyID,
		&i.BaseCurrencyID,
		&i.Rate,
		&i.Ts,
	)
	return i, err
}

const getCurrencyUsed = `-- name: GetCurrencyUsed :one
SELECT id, country_id, currency_id, date_from, date_to FROM currency_used
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCurrencyUsed(ctx context.Context, id int64) (CurrencyUsed, error) {
	row := q.db.QueryRowContext(ctx, getCurrencyUsed, id)
	var i CurrencyUsed
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.CurrencyID,
		&i.DateFrom,
		&i.DateTo,
	)
	return i, err
}

const getCurrentInventory = `-- name: GetCurrentInventory :one
SELECT id, trader_id, item_id, quantity FROM current_inventory
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCurrentInventory(ctx context.Context, id int64) (CurrentInventory, error) {
	row := q.db.QueryRowContext(ctx, getCurrentInventory, id)
	var i CurrentInventory
	err := row.Scan(
		&i.ID,
		&i.TraderID,
		&i.ItemID,
		&i.Quantity,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT id, code, name, is_active, currency_id, details FROM item
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsActive,
		&i.CurrencyID,
		&i.Details,
	)
	return i, err
}

const getOffer = `-- name: GetOffer :one
SELECT id, trader_id, item_id, quantity, buy, sell, price, ts, is_active FROM offer
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOffer(ctx context.Context, id int64) (Offer, error) {
	row := q.db.QueryRowContext(ctx, getOffer, id)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.TraderID,
		&i.ItemID,
		&i.Quantity,
		&i.Buy,
		&i.Sell,
		&i.Price,
		&i.Ts,
		&i.IsActive,
	)
	return i, err
}

const getPrice = `-- name: GetPrice :one
SELECT id, item_id, currency_id, buy, sell, ts FROM price
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPrice(ctx context.Context, id int64) (Price, error) {
	row := q.db.QueryRowContext(ctx, getPrice, id)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.CurrencyID,
		&i.Buy,
		&i.Sell,
		&i.Ts,
	)
	return i, err
}

const getReport = `-- name: GetReport :one
SELECT id, trading_date, item_id, currency_id, first_price, last_price, min_price, max_price, avg_price, total_amount, quantity FROM report
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetReport(ctx context.Context, id int64) (Report, error) {
	row := q.db.QueryRowContext(ctx, getReport, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.TradingDate,
		&i.ItemID,
		&i.CurrencyID,
		&i.FirstPrice,
		&i.LastPrice,
		&i.MinPrice,
		&i.MaxPrice,
		&i.AvgPrice,
		&i.TotalAmount,
		&i.Quantity,
	)
	return i, err
}

const getTrade = `-- name: GetTrade :one
SELECT id, item_id, seller_id, buyer_id, quantity, unit_price, description, offer_id FROM trade
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTrade(ctx context.Context, id int64) (Trade, error) {
	row := q.db.QueryRowContext(ctx, getTrade, id)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.SellerID,
		&i.BuyerID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Description,
		&i.OfferID,
	)
	return i, err
}

const getTrader = `-- name: GetTrader :one
SELECT id, first_name, last_name, user_name, password, email, confirmation_code, time_registered, time_confirmed, country_id, preferred_currency_id FROM trader
WHERE id = $1
`

func (q *Queries) GetTrader(ctx context.Context, id int64) (Trader, error) {
	row := q.db.QueryRowContext(ctx, getTrader, id)
	var i Trader
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Password,
		&i.Email,
		&i.ConfirmationCode,
		&i.TimeRegistered,
		&i.TimeConfirmed,
		&i.CountryID,
		&i.PreferredCurrencyID,
	)
	return i, err
}

const listCountries = `-- name: ListCountries :many
SELECT id, name FROM country
ORDER BY name
`

func (q *Queries) ListCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, listCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCurrencies = `-- name: ListCurrencies :many
SELECT id, code, name, is_active, is_base_currency FROM currency
ORDER BY name
`

func (q *Queries) ListCurrencies(ctx context.Context) ([]Currency, error) {
	rows, err := q.db.QueryContext(ctx, listCurrencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsActive,
			&i.IsBaseCurrency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCurrenciesUsed = `-- name: ListCurrenciesUsed :many
SELECT id, country_id, currency_id, date_from, date_to FROM currency_used
ORDER BY date_from
`

func (q *Queries) ListCurrenciesUsed(ctx context.Context) ([]CurrencyUsed, error) {
	rows, err := q.db.QueryContext(ctx, listCurrenciesUsed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurrencyUsed
	for rows.Next() {
		var i CurrencyUsed
		if err := rows.Scan(
			&i.ID,
			&i.CountryID,
			&i.CurrencyID,
			&i.DateFrom,
			&i.DateTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCurrencyRates = `-- name: ListCurrencyRates :many
SELECT id, currency_id, base_currency_id, rate, ts FROM currency_rate
ORDER BY rate
`

func (q *Queries) ListCurrencyRates(ctx context.Context) ([]CurrencyRate, error) {
	rows, err := q.db.QueryContext(ctx, listCurrencyRates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurrencyRate
	for rows.Next() {
		var i CurrencyRate
		if err := rows.Scan(
			&i.ID,
			&i.CurrencyID,
			&i.BaseCurrencyID,
			&i.Rate,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCurrentInventory = `-- name: ListCurrentInventory :many
SELECT id, trader_id, item_id, quantity FROM current_inventory
ORDER BY date_from
`

func (q *Queries) ListCurrentInventory(ctx context.Context) ([]CurrentInventory, error) {
	rows, err := q.db.QueryContext(ctx, listCurrentInventory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurrentInventory
	for rows.Next() {
		var i CurrentInventory
		if err := rows.Scan(
			&i.ID,
			&i.TraderID,
			&i.ItemID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItems = `-- name: ListItems :many
SELECT id, code, name, is_active, currency_id, details FROM item
ORDER BY name
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsActive,
			&i.CurrencyID,
			&i.Details,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOffers = `-- name: ListOffers :many
SELECT id, trader_id, item_id, quantity, buy, sell, price, ts, is_active FROM offer
ORDER BY quantity
`

func (q *Queries) ListOffers(ctx context.Context) ([]Offer, error) {
	rows, err := q.db.QueryContext(ctx, listOffers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Offer
	for rows.Next() {
		var i Offer
		if err := rows.Scan(
			&i.ID,
			&i.TraderID,
			&i.ItemID,
			&i.Quantity,
			&i.Buy,
			&i.Sell,
			&i.Price,
			&i.Ts,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPrices = `-- name: ListPrices :many
SELECT id, item_id, currency_id, buy, sell, ts FROM price
ORDER BY id
`

func (q *Queries) ListPrices(ctx context.Context) ([]Price, error) {
	rows, err := q.db.QueryContext(ctx, listPrices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Price
	for rows.Next() {
		var i Price
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.CurrencyID,
			&i.Buy,
			&i.Sell,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReports = `-- name: ListReports :many
SELECT id, trading_date, item_id, currency_id, first_price, last_price, min_price, max_price, avg_price, total_amount, quantity FROM report
ORDER BY id
`

func (q *Queries) ListReports(ctx context.Context) ([]Report, error) {
	rows, err := q.db.QueryContext(ctx, listReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.TradingDate,
			&i.ItemID,
			&i.CurrencyID,
			&i.FirstPrice,
			&i.LastPrice,
			&i.MinPrice,
			&i.MaxPrice,
			&i.AvgPrice,
			&i.TotalAmount,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTraders = `-- name: ListTraders :one
SELECT id, first_name, last_name, user_name, password, email, confirmation_code, time_registered, time_confirmed, country_id, preferred_currency_id FROM trader
ORDER BY last_name
`

func (q *Queries) ListTraders(ctx context.Context) (Trader, error) {
	row := q.db.QueryRowContext(ctx, listTraders)
	var i Trader
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Password,
		&i.Email,
		&i.ConfirmationCode,
		&i.TimeRegistered,
		&i.TimeConfirmed,
		&i.CountryID,
		&i.PreferredCurrencyID,
	)
	return i, err
}

const listTrades = `-- name: ListTrades :many
SELECT id, item_id, seller_id, buyer_id, quantity, unit_price, description, offer_id FROM trade
ORDER BY id
`

func (q *Queries) ListTrades(ctx context.Context) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, listTrades)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.SellerID,
			&i.BuyerID,
			&i.Quantity,
			&i.UnitPrice,
			&i.Description,
			&i.OfferID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCountry = `-- name: UpdateCountry :exec
UPDATE country
set name = $2
WHERE id = $1
`

type UpdateCountryParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) error {
	_, err := q.db.ExecContext(ctx, updateCountry, arg.ID, arg.Name)
	return err
}

const updateCurrency = `-- name: UpdateCurrency :exec
UPDATE currency
set name = $2, code = $3, is_active = $4, is_base_currency = $5
WHERE id = $1
`

type UpdateCurrencyParams struct {
	ID             int64
	Name           string
	Code           string
	IsActive       bool
	IsBaseCurrency bool
}

func (q *Queries) UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) error {
	_, err := q.db.ExecContext(ctx, updateCurrency,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.IsActive,
		arg.IsBaseCurrency,
	)
	return err
}

const updateCurrencyRate = `-- name: UpdateCurrencyRate :exec
UPDATE currency_rate
set currency_id = $2, base_currency_id = $3, rate = $4, ts = $5
WHERE id = $1
`

type UpdateCurrencyRateParams struct {
	ID             int64
	CurrencyID     int32
	BaseCurrencyID int32
	Rate           string
	Ts             time.Time
}

func (q *Queries) UpdateCurrencyRate(ctx context.Context, arg UpdateCurrencyRateParams) error {
	_, err := q.db.ExecContext(ctx, updateCurrencyRate,
		arg.ID,
		arg.CurrencyID,
		arg.BaseCurrencyID,
		arg.Rate,
		arg.Ts,
	)
	return err
}

const updateCurrencyUsed = `-- name: UpdateCurrencyUsed :exec
UPDATE currency_used
set country_id = $2, currency_id = $3, date_from = $4, date_to = $5
WHERE id = $1
`

type UpdateCurrencyUsedParams struct {
	ID         int64
	CountryID  int32
	CurrencyID int32
	DateFrom   time.Time
	DateTo     sql.NullTime
}

func (q *Queries) UpdateCurrencyUsed(ctx context.Context, arg UpdateCurrencyUsedParams) error {
	_, err := q.db.ExecContext(ctx, updateCurrencyUsed,
		arg.ID,
		arg.CountryID,
		arg.CurrencyID,
		arg.DateFrom,
		arg.DateTo,
	)
	return err
}

const updateCurrentInventory = `-- name: UpdateCurrentInventory :exec
UPDATE current_inventory
set trader_id = $2, item_id = $3, quantity = $4
WHERE id = $1
`

type UpdateCurrentInventoryParams struct {
	ID       int64
	TraderID int32
	ItemID   int32
	Quantity string
}

func (q *Queries) UpdateCurrentInventory(ctx context.Context, arg UpdateCurrentInventoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCurrentInventory,
		arg.ID,
		arg.TraderID,
		arg.ItemID,
		arg.Quantity,
	)
	return err
}

const updateItem = `-- name: UpdateItem :exec
UPDATE item
set code = $2, name = $3, is_active = $4, currency_id = $5, details = $6
WHERE id = $1
`

type UpdateItemParams struct {
	ID         int64
	Code       string
	Name       string
	IsActive   bool
	CurrencyID int32
	Details    sql.NullString
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem,
		arg.ID,
		arg.Code,
		arg.Name,
		arg.IsActive,
		arg.CurrencyID,
		arg.Details,
	)
	return err
}

const updateOffer = `-- name: UpdateOffer :exec
UPDATE offer
set trader_id = $2, item_id = $3, quantity = $4, buy = $5, sell = $6, price = $7, ts = $8, is_active = $9
WHERE id = $1
`

type UpdateOfferParams struct {
	ID       int64
	TraderID int32
	ItemID   int32
	Quantity string
	Buy      bool
	Sell     bool
	Price    sql.NullString
	Ts       time.Time
	IsActive bool
}

func (q *Queries) UpdateOffer(ctx context.Context, arg UpdateOfferParams) error {
	_, err := q.db.ExecContext(ctx, updateOffer,
		arg.ID,
		arg.TraderID,
		arg.ItemID,
		arg.Quantity,
		arg.Buy,
		arg.Sell,
		arg.Price,
		arg.Ts,
		arg.IsActive,
	)
	return err
}

const updatePrice = `-- name: UpdatePrice :exec
UPDATE price
set item_id = $1, currency_id = $2, buy = $3, sell = $4, ts = $5
WHERE id = $1
`

type UpdatePriceParams struct {
	ItemID     int32
	CurrencyID int32
	Buy        string
	Sell       string
	Ts         time.Time
}

func (q *Queries) UpdatePrice(ctx context.Context, arg UpdatePriceParams) error {
	_, err := q.db.ExecContext(ctx, updatePrice,
		arg.ItemID,
		arg.CurrencyID,
		arg.Buy,
		arg.Sell,
		arg.Ts,
	)
	return err
}

const updateReport = `-- name: UpdateReport :exec
UPDATE report
set trading_date = $2, item_id = $3, currency_id = $4, first_price = $5, last_price = $6, min_price = $7, max_price = $8, avg_price = $9, total_amount = $10, quantity = $11
WHERE id = $1
`

type UpdateReportParams struct {
	ID          int64
	TradingDate time.Time
	ItemID      int32
	CurrencyID  int32
	FirstPrice  sql.NullString
	LastPrice   sql.NullString
	MinPrice    sql.NullString
	MaxPrice    sql.NullString
	AvgPrice    sql.NullString
	TotalAmount sql.NullString
	Quantity    sql.NullString
}

func (q *Queries) UpdateReport(ctx context.Context, arg UpdateReportParams) error {
	_, err := q.db.ExecContext(ctx, updateReport,
		arg.ID,
		arg.TradingDate,
		arg.ItemID,
		arg.CurrencyID,
		arg.FirstPrice,
		arg.LastPrice,
		arg.MinPrice,
		arg.MaxPrice,
		arg.AvgPrice,
		arg.TotalAmount,
		arg.Quantity,
	)
	return err
}

const updateTrade = `-- name: UpdateTrade :exec
UPDATE trade
set item_id = $2, seller_id = $3, buyer_id = $4, quantity = $5, unit_price = $6, description = $7, offer_id = $8
WHERE id = $1
`

type UpdateTradeParams struct {
	ID          int64
	ItemID      int32
	SellerID    sql.NullInt32
	BuyerID     int32
	Quantity    string
	UnitPrice   string
	Description string
	OfferID     int32
}

func (q *Queries) UpdateTrade(ctx context.Context, arg UpdateTradeParams) error {
	_, err := q.db.ExecContext(ctx, updateTrade,
		arg.ID,
		arg.ItemID,
		arg.SellerID,
		arg.BuyerID,
		arg.Quantity,
		arg.UnitPrice,
		arg.Description,
		arg.OfferID,
	)
	return err
}

const updateTrader = `-- name: UpdateTrader :exec
UPDATE trader
set first_name = $2, last_name = $3, user_name = $4, password = $5, email = $6, confirmation_code = $7, time_registered = $8,
    time_confirmed = $9, country_id = $10, preferred_currency_id = $11
WHERE id = $1
`

type UpdateTraderParams struct {
	ID                  int64
	FirstName           string
	LastName            string
	UserName            string
	Password            string
	Email               string
	ConfirmationCode    string
	TimeRegistered      time.Time
	TimeConfirmed       time.Time
	CountryID           sql.NullInt32
	PreferredCurrencyID sql.NullInt32
}

func (q *Queries) UpdateTrader(ctx context.Context, arg UpdateTraderParams) error {
	_, err := q.db.ExecContext(ctx, updateTrader,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
		arg.Password,
		arg.Email,
		arg.ConfirmationCode,
		arg.TimeRegistered,
		arg.TimeConfirmed,
		arg.CountryID,
		arg.PreferredCurrencyID,
	)
	return err
}
